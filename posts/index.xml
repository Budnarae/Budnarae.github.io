<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on budnarae archive</title>
    <link>https://Budnarae.github.io/posts/</link>
    <description>Recent content in Posts on budnarae archive</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>budnarae1001@gmail.com (budnarae)</managingEditor>
    <webMaster>budnarae1001@gmail.com (budnarae)</webMaster>
    <lastBuildDate>Wed, 21 Feb 2024 02:23:56 +0000</lastBuildDate><atom:link href="https://Budnarae.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>병합 정렬을 사용하여 push_swap 문제 해결하기</title>
      <link>https://Budnarae.github.io/posts/merge_sort_in_push_swap/</link>
      <pubDate>Wed, 21 Feb 2024 02:23:56 +0000</pubDate>
      <author>budnarae1001@gmail.com (budnarae)</author>
      <guid>https://Budnarae.github.io/posts/merge_sort_in_push_swap/</guid>
      <description>&lt;hr&gt;
&lt;h2 id=&#34;병합-정렬을-사용하여-push_swap-문제-해결하기&#34;&gt;병합 정렬을 사용하여 push_swap 문제 해결하기&lt;/h2&gt;
&lt;hr&gt;
&lt;h3 id=&#34;개요&#34;&gt;개요&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;&#34;&gt;스택을 만들었으니&lt;/a&gt; 이제 정렬을 구현할 차례이다. 42_서울에는 그동안 push_swap 과제를 해결한 수많은 사람들이 축척한 다양한 문제 해결법들이 존재한다. 필자 외 다른 사람들의 해결법을 보고 싶다면 42 서울의 정보 아카이빙 동아리 &lt;a href=&#34;https://80000coding.oopy.io/aboutus&#34;&gt;팔만코딩경&lt;/a&gt;을 참고하거나, 구글링으로 필자처럼 개인 블로그에 정리한 카뎃들의 글을 참고하는 것을 추천한다.&lt;/p&gt;
&lt;p&gt;push_swap 과제에서 정렬하는 것 만큼이나 중요한 것은 &lt;em&gt;&lt;strong&gt;가능한 적은 연산&lt;/strong&gt;&lt;/em&gt;(sa, sb, ra 등등)을 사용하여 효울적으로 정렬을 수행하는 것이다. 100개의 인자가 들어왔을 때 연산 700번 이내, 이내, 500개의 인자가 들어왔을 때 5000번 이내로 정렬을 수행해야 만점을 받을 수 있다.&lt;/p&gt;
&lt;p&gt;필자는 병합 정렬의 매커니즘을 사용하여 과제를 해결하였다.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;문제해결&#34;&gt;문제해결&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&#34;./img/push_swap_1.drawio.png&#34; alt=&#34;1&#34;&gt;&lt;/p&gt;
&lt;p&gt;위와 같은 상황을 가정해보자. stack a에 데이터의 초기값, 그러니까 무작위로 뒤섞인 정수들이 차곡차곡 쌓인 상황이다. 정렬이 시작되기 전이어서 stack b는 비어있다. 우리는 앞서 언급한 연산자들을 적절히 활용하여, 데이터를 스택의 꼭대기나 바닥으로 보내기도 하고, stack a와 b를 왔다갔다 하기도 하면서 stack의 top으로 갈수록 값이 작아지도록 정렬해야한다. 그리고 그 정렬은 최종적으로 b 가 아닌 a에서 이루어져야 한다.&lt;/p&gt;
&lt;p&gt;편의상 stack의 맨 위의 노드를 top, top 바로 아래 노드를 mid,  stack의 맨 바닥의 노드를 bot이라 부르기로 한다. 연산 횟수를 줄이려면, 노드를 stack a에서 b로, 또는 b에서 a로 옮길 때 연산의 횟수가 적을수록 좋다. 이미지의 설명과 같이, top, mid, bot 노드는 2회 이내의 연산으로 스택 간 이동이 가능하다. 따라서 스택 간 이동은 top, mid, bod 노드에 한하여 수행하고, 나머지는 배제하기로 한다.&lt;/p&gt;
&lt;p&gt;병합 정렬의 기본은 데이터의 집합을 당장 정렬이 가능한 작은 단위로 나눈 후 그 단위에 한하여 정렬하고, 단위들을 병합하는 것이다. 이를 push_swap에 적용한 방식은 다음과 같다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;a의 top, mid, bot 중 가장 작은 값을 b로 보낸다.&lt;/li&gt;
&lt;li&gt;top, mid, bot 중 b로 보낸 값보다 큰 값이 있다면 보낸다. 만약 그러한 값이 여러 개라면 b의 값과 절대값 차이가 가장 적은 값을 보낸다.&lt;/li&gt;
&lt;li&gt;조건을 만족하는 한 2.를 반복한다.&lt;/li&gt;
&lt;li&gt;2.를 더 이상 수행할 수 없을 때(a의 top, mid, bot 모두 b의 top보다 작을 때) 다시 1.을 수행한다.&lt;/li&gt;
&lt;li&gt;stack a가 텅 빌 때까지 1~4를 반복한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;위 과정을 수행하면 stack b에 아래와 같은 모양으로 값이 정렬된다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./img/push_swap_2.drawio.png&#34; alt=&#34;2&#34;&gt;.&lt;/p&gt;
&lt;p&gt;정렬된 최소 단위가 형성된 모습을 볼 수 있다. 정렬을 거꾸로 한 이유는 나중에 다시 a로 옮길 때 위아래가 뒤집어지기 때문이다.&lt;br&gt;
이 최소 단위들을 아래와 같은 과정으로 병합한다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;단위들의 1 / 3 개를 스택 a로 옮긴다. 1 / 2이 아닌 1 / 3 만큼 옮기는 이유는 한 번에 3개의 단위를 병합하는 것이 연산 개수 최적화에 유리하기 때문이다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;./img/push_swap_3.drawio.png&#34; alt=&#34;3&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;a의 bot과 b의 top 중 더 큰 값을 a의 top으로 옮긴다. 두 최소단위가 완전히 병합될 때까지 이를 반복한다. b가 텅 빌때까지 반복한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;(첫 번째 병합 후)
&lt;img src=&#34;./img/push_swap_4.drawio.png&#34; alt=&#34;4&#34;&gt;&lt;/p&gt;
&lt;p&gt;(두 번째 병합 후)
&lt;img src=&#34;./img/push_swap_5.drawio.png&#34; alt=&#34;5&#34;&gt;&lt;/p&gt;
&lt;p&gt;위 예시에선 데이터의 개수가 적어 stack a, b를 한 번 왕복한 것만으로 정렬이 완료되었지만 데이터의 개수가 많을 때는 스택 간 왕복을 여러 번 수행해야 한다. a -&amp;gt; b 방향으로 병합을 수행할 때는 a의 top과 b의 bot 중 더 큰 값을 b의 top으로 옮기는 방법으로 병합시키면 된다.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;아직-부족하다-연산-개수-최적화하기&#34;&gt;아직 부족하다. 연산 개수 최적화하기&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;위의 방식을 적용하면 정렬 자체는 정상적으로 수행되지만 만점을 받기에는 부족하다. 연산을 더 줄이려면 어떻게 해야할까? 이 알고리즘에서 수행되는 연산은 아래와 같이 분류할 수 있다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;다른 스택으로 최소 정렬 단위들의 일부를 옮기는 연산.&lt;/li&gt;
&lt;li&gt;stack a, b의 단위들을 병합하는 연산.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;최소 정렬 단위를 옮길 때 적은 수의 단위를 옮기면 1.의 연산은 줄어든다. 하지만 2.의 연산은 증가한다. 그 역도 성립하므로 1.과 2.는 trade-off 관계에 있다. 위의 예시에서 단위 개수의 1 / 3을 옮긴 것은 여러 개의 개수를 테스트한 결과 최적의 비율을 찾은 것이다. 하지만 여전히 만점을 받기에는 연산의 개수가 너무 많다. 그래서 추가적인 최적화를 진행해야 했다.&lt;/p&gt;
&lt;p&gt;유일하게 1.의 연산을 생략할 수 있는 순간이 있다. 바로 처음 stack a에 데이터가 들어오고 stack b에 최초의 최소 정렬단계를 만드는 순간이다. 최초의 최소 정렬단계를 만드는 순간을 아래와 같이 수정한다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;a의 top, mid, bot 중 가장 작은 값을 b로 보낸다.&lt;/li&gt;
&lt;li&gt;top, mid, bot 중 b로 보낸 값보다 큰 값이 있다면 보낸다. 만약 그러한 값이 여러 개라면 b의 값과 절대값 차이가 가장 적은 값을 보낸다.&lt;/li&gt;
&lt;li&gt;조건을 만족하는 한 2.를 반복한다.&lt;/li&gt;
&lt;li&gt;최초의 최소 정렬 단위가 형성된다.&lt;/li&gt;
&lt;li&gt;a의 top, mid, bot, 그리고 b의 bot 중 가장 작은 값을 b의 top으로 보낸다.&lt;/li&gt;
&lt;li&gt;a의 top, mid, bot, 그리고 b의 bot 중 b의 top으로 보낸 값보다 큰 값이 있다면 보낸다. 만약 그러한 값이 여러 개라면 b top의 값과 절대값 차이가 가장 적은 값을 보낸다.&lt;/li&gt;
&lt;li&gt;stack a가 텅 빌 때까지 4~6을 반복한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;위 방식을 사용하면 스택간 데이터의 이동 없이도 단위들을 1회 병합할 수 있게 된다. 따라서 전체적인 연산의 횟수가 줄어들게 된다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./img/push_swap_6.drawio.png&#34; alt=&#34;6&#34;&gt;&lt;/p&gt;
&lt;p&gt;그러나 처음부터 최초 단위를 병합에 활용하면 최초 단위에서만 병합이 이루어진다. 그러면 최초 단위의 크기만 지속적으로 커지기 때문에 rrb 연산이 지나치게 많아져 오히려 연산이 늘어난다. 이러한 케이스를 방지하기 위해 아래 조건을 충족하는 경우에만 최초 단위를 병합에 활용한다.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;stack a에서 b로 데이터의 1 / 3이 넘어간 상태여야 하며, 그 시점에 stack b에 형성된 단위의 개수가 총 데이터 개수 / 100 을 넘어야 한다.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;이 포스트에서 다룬 내용의 코드 구현이 보고싶다면 필자의 &lt;a href=&#34;https://github.com/Budnarae/42_seoul/tree/main&#34;&gt;42 seoul git&lt;/a&gt;의 push_swap애서 push_swap.c, push_swap_2.c, &amp;hellip;, push_swap_6.c를 참조하기를 바란다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>원형 이중 연결 리스트를 이용한 마법의 스택 구현</title>
      <link>https://Budnarae.github.io/posts/magical_stack/</link>
      <pubDate>Tue, 09 Jan 2024 08:27:14 +0000</pubDate>
      <author>budnarae1001@gmail.com (budnarae)</author>
      <guid>https://Budnarae.github.io/posts/magical_stack/</guid>
      <description>&lt;hr&gt;
&lt;h2 id=&#34;원형-이중-연결-리스트를-이용한-마법의-스택-구현&#34;&gt;원형 이중 연결 리스트를 이용한 마법의 스택 구현&lt;/h2&gt;
&lt;hr&gt;
&lt;h3 id=&#34;개요&#34;&gt;개요&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://budnarae.github.io/tags/push_swap/&#34;&gt;#push_swap&lt;/a&gt;의 다른 글들과 이어진다.&lt;br&gt;
입력받은 데이터가 &lt;a href=&#34;&#34;&gt;중복 검사&lt;/a&gt;를 무사히 통과하였다면, 2개의 스택을 구현한 후 &lt;em&gt;&lt;strong&gt;그 스택들&amp;rsquo;만&amp;rsquo;을&lt;/strong&gt;&lt;/em&gt; 이용하여 데이터를 정렬해야 한다.&lt;br&gt;
단, 통상의 스택과 달리 아래의 연산이 추가적으로 가능해야 한다(stack a, b 단 둘만 존재한다고 가정한다).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pa : stack b의 top을 stack a의 top으로 옮김&lt;/li&gt;
&lt;li&gt;pb : stack a의 top을 stack b의 top으로 옮김&lt;/li&gt;
&lt;li&gt;sa : stack a의 제일 꼭대기의 값 2개를 서로 뒤바꿈&lt;/li&gt;
&lt;li&gt;sb : stack b의 제일 꼭대기의 값 2갤르 서로 뒤바꿈&lt;/li&gt;
&lt;li&gt;ss : sa 와 sb를 동시에 실행&lt;/li&gt;
&lt;li&gt;ra : stack a의 모든 원소를 한 칸 위로 올린다. top은 맨 아래로 옮긴다.&lt;/li&gt;
&lt;li&gt;rb : stack b의 모든 원소를 한 칸 위로 올린다. top은 맨 아래로 내린다.&lt;/li&gt;
&lt;li&gt;rr : ra와 rb를 동시에 실행한다.&lt;/li&gt;
&lt;li&gt;rra : stack a의 모든 원소를 한 칸 아래로 내린다. bot(스택의 제일 아래)은 맨 위로 옮긴다.&lt;/li&gt;
&lt;li&gt;rrb : stack b의 모든 원소를 한 칸 아래로 내린다. bot(스택의 제일 아래)은 맨 위로 옮긴다.&lt;/li&gt;
&lt;li&gt;rrr : rra와 rrb를 동시에 실행한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;문제해결---원형-이중-연결-리스트&#34;&gt;문제해결 - 원형 이중 연결 리스트&lt;/h3&gt;
&lt;p&gt;따라서 앞으로 이 스택을 마법의 스택이라 명명하기로 한다. 이 호칭은 42 서울의 또 다른 10기 교육생 hyunjunl 님의 아이디어이다.&lt;br&gt;
필자는 마법의 스택을 구현하기 위해 원형 이중 연결 리스트를 사용하기로 하였다.&lt;br&gt;
이 자료구조는 ra, rb, rra, rrb를 매우 간단하게 구현할 수 있다는 장점이 있다. 단순히 head를 앞이나 뒤로 한 칸씩만 옮기면 되기 때문이다.&lt;/p&gt;
&lt;div class=&#34;mermaid&#34;&gt;stateDiagram-v2
    top --&gt; 25
    25 --&gt; 28
    28 --&gt; 25
    28 --&gt; 27
    27 --&gt; 28
    27 --&gt; 1
    1 --&gt; 27
    25 --&gt; 1
    1 --&gt; 25
&lt;/div&gt;

&lt;div class=&#34;mermaid&#34;&gt;stateDiagram-v2
    top --&gt; 28
    25 --&gt; 28
    28 --&gt; 25
    28 --&gt; 27
    27 --&gt; 28
    27 --&gt; 1
    1 --&gt; 27
    25 --&gt; 1
    1 --&gt; 25
&lt;/div&gt;

&lt;div class=&#34;mermaid&#34;&gt;stateDiagram-v2
    top --&gt; 1
    25 --&gt; 28
    28 --&gt; 25
    28 --&gt; 27
    27 --&gt; 28
    27 --&gt; 1
    1 --&gt; 27
    25 --&gt; 1
    1 --&gt; 25
&lt;/div&gt;

&lt;p&gt;그러나 pa, pb, 그리고 sa, sb의 경우 다수의 노드 간 연결을 수정해야 하므로 구현이 복잡해진다.&lt;br&gt;
그럼에도 추후에 필자가 사용할 정렬 알고리즘은 ra, rb, rra, rrb 연산을 매우 많이 사용하기 때문에 이점이 있다고 판단하였다.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;이 포스트에서 다룬 내용의 코드 구현이 보고싶다면 필자의 &lt;a href=&#34;https://github.com/Budnarae/42_seoul/tree/main&#34;&gt;42 seoul git&lt;/a&gt;의 push_swap에서 most_basic_2.c, most_basic.c, operations.c, 그리고 push_swap.h 헤더파일의 t_stack 구조체를 참조하기를 바란다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>avl tree를 이용한 중복 검사</title>
      <link>https://Budnarae.github.io/posts/avl_tree/</link>
      <pubDate>Tue, 02 Jan 2024 23:04:21 +0000</pubDate>
      <author>budnarae1001@gmail.com (budnarae)</author>
      <guid>https://Budnarae.github.io/posts/avl_tree/</guid>
      <description>&lt;hr&gt;
&lt;h2 id=&#34;avl-트리를-사용한-중복-검사&#34;&gt;avl 트리를 사용한 중복 검사&lt;/h2&gt;
&lt;hr&gt;
&lt;h3 id=&#34;개요&#34;&gt;개요&lt;/h3&gt;
&lt;p&gt;본문은 보다 효율적으로 중복 여부를 검사하기 위해 고민한 경험을 공유하기 위해 작성되었다.&lt;br&gt;
이 주제를 고민하게 된 계기는 &lt;a href=&#34;https://42seoul.kr/seoul42/main/view&#34;&gt;42 서울&lt;/a&gt;의 2서클 과제인 push_swap이었다.&lt;br&gt;
당장 push_swap의 모든 것을 알 필요는 없다. 그 내용이 방대할 뿐더러, 이 글의 내용을 이해하는 데 필요하지도 않기 때문이다.&lt;br&gt;
중요한 것은 push_swap을 구현하기 위해 데이터들의 중복 여부를 검사하는 알고리즘을 만들어야 한다는 사실이다.&lt;br&gt;
보다 자세한 조건은 아래와 같다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;데이터는 main 함수의 매개변수로 받는다.&lt;/li&gt;
&lt;li&gt;모든 데이터는 int형이다 (main의 매개변수로 받으면 char **형태로 들어오지만, atoi를 이용해 변환한다).&lt;/li&gt;
&lt;li&gt;모든 데이터는 서로 중복되지 않아야 한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;문제해결---이진-탐색-트리&#34;&gt;문제해결 - 이진 탐색 트리&lt;/h3&gt;
&lt;p&gt;가장 간단하게 떠올릴 수 있는 방법은 모든 데이터를 서로 비교하는 것이다.&lt;/p&gt;
&lt;div class=&#34;mermaid&#34;&gt;graph LR
	style A fill:#89cff0
	style B fill:#ffe599
	A[16]  --&gt;  B[32]
	B  --&gt;  C[24]
	C  --&gt;  D[...]
	D  --&gt;  E[16]
&lt;/div&gt;

&lt;div class=&#34;mermaid&#34;&gt;graph LR
	style A fill:#89cff0
	style C fill:#ffe599
	A[16]  --&gt;  B[32]
	B  --&gt;  C[24]
	C  --&gt;  D[...]
	D  --&gt;  E[16]
&lt;/div&gt;

&lt;div class=&#34;mermaid&#34;&gt;graph LR
	style A fill:#89cff0
	style E fill:#ff91af
	A[16]  --&gt;  B[32]
	B  --&gt;  C[24]
	C  --&gt;  D[...]
	D  --&gt;  E[16]
&lt;/div&gt;

&lt;p&gt;그러나 이와 같은 방법은 O(n^2)의 시간 복잡도를 갖기 때문에 최적화에 불리하다.&lt;br&gt;
내 주변의 동료들은 최적화를 포기하고 위의 방법을 사용하거나, 퀵 정렬을 이용해 데이터를 정렬한 후 i의 값을 1씩 늘리며 i, i + 1번째 원소를 서로 비교하는 방법을 사용하였다.&lt;br&gt;
필자는 처음에는 이진탐색트리를 구현하였다.
이진탐색트리는 자식이 2개인 tree로 아래와 같은 구조를 가진다.&lt;/p&gt;
&lt;div class=&#34;mermaid&#34;&gt;graph TD
    A[5] --&gt; |부모보다 작으면 왼쪽으로 간다| B[4]
    A --&gt; |부모보다 크면 오른쪽으로 간다| C[8]
&lt;/div&gt;

&lt;p&gt;평균적으로, 이진탐색트리는 모든 데이터와 값을 대조할 필요가 없으므로 효율적인 알고리즘이다 (검색을 데이터의 수만큼 실행하므로 O(n * logn)).&lt;/p&gt;
&lt;p&gt;(9를 검색하는 경우)&lt;/p&gt;
&lt;div class=&#34;mermaid&#34;&gt;graph TD
    style A fill:#89cff0
    style C fill:#89cff0
    style F fill:#89cff0
    A[5] --&gt; B[3]
    A --&gt; |5보다 크다| C[11]
    B --&gt; D[1]
    B --&gt; E[4]
    C --&gt; |11보다 작다| F[9]
    C --&gt; G[13]
&lt;/div&gt;

&lt;p&gt;이를 코드로 구현한 내용은 아래와 같다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;typedef struct s_node   //트리 구성 노드
{
	int data;
	struct s_node *right;
	struct s_node *left;
}	t_node;

void free_tree(t_node *tree)	//트리의 위에서 아래로 내려가면서 재귀적으로 할당을 해제
{
	if (tree -&amp;gt; right)
		free_tree(tree -&amp;gt; right);
	if (tree -&amp;gt; left)
		free_tree(tree -&amp;gt; left);
	if (tree)
		free(tree);
}

int search_tree(t_node **tree, int s)
{
	if (*tree == 0) //포인터가 null을 가리키고 있다면 받아온 데이터로 새로운 노드를 생성한다.
	{
		*tree = (t_node *)calloc(1, sizeof(t_node));
		if (*tree == 0)
			return (-1);
		(*tree) -&amp;gt; data = s;
		return (0);
	}
	else
	{
		if ((*tree) -&amp;gt; data &amp;lt; s)    //현재 노드보다 값이 작다면 왼쪽으로 보낸다.
			return (search_tree(&amp;amp;((*tree)-&amp;gt;right), s));
		else if ((*tree) -&amp;gt; data == s)  //현재 노드와 값이 같다면(중복이 존재한다면) 1을 반환하고 재귀를 종료한다.
			return (1);
		else
			return (search_tree(&amp;amp;((*tree)-&amp;gt;left), s));  //현재 노드보다 값이 크다면 오른쪽으로 보낸다.
	}
}

int main(int argc, char ** argv)
{
	double start;       //검색 시작 시간
	double end;         //검색 종료 시간
	int func_returned;

	int		*storage;
	t_node	*storage2;

	int	i, j;

	if (argc &amp;lt;= 1)
		return (0);

    /*
    방법 1. 모든 데이터를 서로 비교
    */
	
	start = clock();

	storage = (int *)calloc(argc - 1, sizeof(int));

	i = 0;
	while (i &amp;lt; argc - 1)    //main으로 받은 문자열들을 int로 변환해 storage에 저장
	{
		storage[i] = atoi(argv[i + 1]);
		i++;
	}
	
	i = 0;
	while (i &amp;lt; argc - 2)    //데이터를 자기보다 뒤쪽에 위치한 모든 값들과 비교.
	{
		j = i + 1;
		while (j &amp;lt; argc - 1)
		{
			if (storage[i] == storage[j])
			{
				printf(&amp;#34;found dup : %d\n&amp;#34;, atoi(argv[j + 1]));  //중복값이 있으면 그 값을 출력하고 반복문을 종료
				i = argc;
			}
			j++;
		}
		i++;
	}
	free(storage);
	end = clock();
	printf(&amp;#34;method 1 runtime : %f\n&amp;#34;, (end - start) / CLOCKS_PER_SEC);  //검색에 걸린 시간 출력

    /*
    방법 2. 이진탐색트리
    */

	start = clock();

	storage2 = 0;
	i = 0;
	while (i &amp;lt; argc - 1)
	{
		func_returned = search_tree(&amp;amp;storage2, atoi(argv[i + 1]));  //데이터를 트리에 이어붙임
		if (func_returned == -1)                                    //malloc protection
		{
			free_tree(storage2);
			return (0);
		}
		else if (func_returned == 1)                                //트리에 중복값이 있었으면 그 값을 반환
		{
			printf(&amp;#34;found dup : %d\n&amp;#34;, atoi(argv[i + 1]));
			break;
		}
		i++;
	}
	free_tree(storage2);
	end = clock();
	printf(&amp;#34;method 2 runtime : %f\n&amp;#34;, (double)(end - start) / CLOCKS_PER_SEC);  //검색애 걸린 시간 출력
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;(출력 결과)&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;//길이 500짜리 난수 배열을 입력했을 때
found dup : 2378
method 1 runtime : 0.000262
found dup : 2378
method 2 runtime : 0.000115

//길이 1000짜리 난수 배열을 입력했을 때
found dup : 7687
method 1 runtime : 0.000937
found dup : 7687
method 2 runtime : 0.000236
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;평균적으로 방법 2가 더 빠른 것을 볼 수 있다.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;문제해결---avl-트리&#34;&gt;문제해결 - avl 트리&lt;/h3&gt;
&lt;p&gt;그러나 이진 탐색 트리는 한 가지 단점을 갖는다.&lt;br&gt;
정렬된 배열이 입력으로 들어왔을 때 트리가 아래와 같은 모양으로 생성된다는 점이다.&lt;/p&gt;
&lt;div class=&#34;mermaid&#34;&gt;graph TD
A[1] --&gt; |부모보다 크다| B[2]
B --&gt; |부모보다 크다| C[3]
C --&gt; |부모보다 크다| D[4]
D --&gt; |부모보다 크다| E[5]
E --&gt; |부모보다 크다| F[6]
&lt;/div&gt;

&lt;p&gt;결과적으로 방법 1과 다를 바 없는 시간복잡도를 가지며, malloc과 free가 포함되기 때문에 오히려 느려진다.&lt;/p&gt;
&lt;p&gt;(출력결과)&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;\\길이 500짜리 정렬된 배열을 입력했을 때
found dup : 500
method 1 runtime : 0.000257
found dup : 500
method 2 runtime : 0.000650
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이를 해결하기 위해 사용하는 방법이 avl 트리이다. avl 트리란 왼쪽과 오른쪽의 깊이가 2 이상 차이날 때 아래와 같이 자동으로 균형을 회복하는 기능을 가진 트리이다.&lt;/p&gt;
&lt;p&gt;(왼쪽으로 트리가 기울어진 경우. T1 ~ T4 포인터는 null을 가리키고 있어도 무방하다)&lt;br&gt;
(LL 케이스)&lt;/p&gt;
&lt;div class=&#34;mermaid&#34;&gt;graph TD
	style X fill:#89cff0
	style Y fill:#89cff0
	style Z fill:#89cff0
	Z[Z] --&gt; Y[Y]
	Z --&gt; d[T4]
	Y --&gt; X[X]
	Y --&gt; c[T3]
	X --&gt; a[T1]
	X --&gt; b[T2]
&lt;/div&gt;

&lt;p&gt;아래와 같이 변환한다.&lt;/p&gt;
&lt;div class=&#34;mermaid&#34;&gt;graph TD
	style X fill:#89cff0
	style Y fill:#89cff0
	style Z fill:#89cff0
	Y --&gt; X[X]
	X --&gt; a[T1]
	X --&gt; b[T2]
	Y[Y] --&gt; Z[Z]
	Z --&gt; c[T3]
	Z --&gt; d[T4]
&lt;/div&gt;

&lt;p&gt;(LR 케이스의 경우 LL 케이스로 변환 후 처리한다.)&lt;/p&gt;
&lt;div class=&#34;mermaid&#34;&gt;flowchart TD
	style Y fill:#89cff0
	style Z fill:#89cff0
	Z[Z] --&gt; Y[Y]
	Y --&gt; a[T1]
    Y --&gt; X[X]
    X --&gt; b[T2]
    X --&gt; c[T3]
    Z --&gt; d[T4]
	style X fill:#89cff0
&lt;/div&gt;

&lt;p&gt;아래와 같이 변환한다.&lt;/p&gt;
&lt;div class=&#34;mermaid&#34;&gt;graph TD
	style X fill:#89cff0
	style Y fill:#89cff0
	style Z fill:#89cff0
	Z[Z] --&gt; X[X]
	X --&gt; Y[Y]
	Y --&gt; a[T1]
	Y --&gt; b[T2]
	X --&gt; c[T3]
	Z --&gt; d[T4]
&lt;/div&gt;

&lt;p&gt;오른쪽으로 치우친 경우 위의 경우를 대칭으로 적용한다.&lt;br&gt;
이를 코드로 구현하면 아래와 같다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;void	left_case(t_node **tree)	//노드의 연결을 수정하여 트리의 균형을 맞춘다.
{
	t_node	*tmp1;
	t_node	*tmp2;

	if ((*tree)-&amp;gt;left != 0)	//LR인 경우 LL로 전환
	{
		if ((*tree)-&amp;gt;left-&amp;gt;right != 0)
		{
			if ((*tree)-&amp;gt;left-&amp;gt;left == 0)
			{
				tmp1 = (*tree)-&amp;gt;left;
				tmp2 = (*tree)-&amp;gt;left-&amp;gt;right;
				(*tree)-&amp;gt;left = tmp2;
				tmp2 = (*tree)-&amp;gt;left-&amp;gt;left;
				(*tree)-&amp;gt;left-&amp;gt;left = tmp1;
				(*tree)-&amp;gt;left-&amp;gt;left-&amp;gt;right = tmp2;
			}
		}
	}
	/*
	LL 케이스 처리
	*/
	tmp1 = *tree;
	tmp2 = (*tree)-&amp;gt;left;
	*tree = tmp2;
	tmp2 = (*tree)-&amp;gt;right;
	(*tree)-&amp;gt;right = tmp1;
	if ((*tree)-&amp;gt;right != 0)
		(*tree)-&amp;gt;right-&amp;gt;left = tmp2;
}

void	right_case(t_node **tree)
{
	t_node	*tmp1;
	t_node	*tmp2;

	if ((*tree)-&amp;gt;right != 0)	//RL인 경우 RR로 전환
	{
		if ((*tree)-&amp;gt;right-&amp;gt;left != 0)
		{
			if ((*tree)-&amp;gt;right-&amp;gt;right == 0)
			{
				tmp1 = (*tree)-&amp;gt;right;
				tmp2 = (*tree)-&amp;gt;right-&amp;gt;left;
				(*tree)-&amp;gt;right = tmp2;
				tmp2 = (*tree)-&amp;gt;right-&amp;gt;right;
				(*tree)-&amp;gt;right-&amp;gt;right = tmp1;
				(*tree)-&amp;gt;right-&amp;gt;right-&amp;gt;left = tmp2;
			}
		}
	}
	/*
	RR 케이스 처리
	*/
	tmp1 = *tree;
	tmp2 = (*tree)-&amp;gt;right;
	*tree = tmp2;
	tmp2 = (*tree)-&amp;gt;left;
	(*tree)-&amp;gt;left = tmp1;
	if ((*tree)-&amp;gt;left != 0)
		(*tree)-&amp;gt;left-&amp;gt;right = tmp2;
}

int	balance_tree(t_node **tree, int depht)	//트리의 균형을 맞추는 함수
{
	int	balance_parameter;
	int	depht_l;	//왼쪽 트리의 깊이
	int	depht_r;	//오른쪽 트리의 깊이

	if (*tree == 0)
		return (depht);
	/*
	자식 노드 -&amp;gt; 부모 노드 순으로 함수가 실행된다 = 트리의 아랫부분 부터 균형을 맞추며 위로 올라간다. 
	자식 노드로 재귀할 때 깊이를 1 더한다.
	*/
	depht_l = balance_tree(&amp;amp;((*tree)-&amp;gt;left), depht + 1);
	depht_r = balance_tree(&amp;amp;((*tree)-&amp;gt;right), depht + 1);
	balance_parameter = depht_r - depht_l;	//balance_parameter의 절대값이 2 이상이면 균형을 맞춘다.
	if (balance_parameter &amp;lt; -1)	//왼쪽으로 치우친 경우
	{
		left_case(tree);
		return (depht_l - 1);	//깊이를 반환
	}
	else if (balance_parameter &amp;gt; 1)	//오른쪽으로 치우친 경우
	{
		right_case(tree);
		return (depht_r - 1);	//깊이를 반환
	}
	if (depht_l &amp;gt; depht_r)	//트리의 깊이가 2 이상 차이나지 않을 경우, 깊이가 더 깊은 쪽을 반환
		return (depht_l);
	else
		return (depht_r);
}
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int main(int argc, char **argv)
{
	(중략)
	start = clock();

	storage2 = 0;
	i = 0;
	while (i &amp;lt; argc - 1)
	{
		func_returned = search_tree(&amp;amp;storage2, atoi(argv[i + 1]));
		if (func_returned == -1)
		{
			free_tree(storage2);
			return (0);
		}
		else if (func_returned == 1)
		{
			printf(&amp;#34;found dup : %d\n&amp;#34;, atoi(argv[i + 1]));
			break;
		}
		if (i % 50 == 0)	//50번에 한번씩 트리를 정렬
			balance_tree(&amp;amp;storage2, 0);
		i++;
	}
	free_tree(storage2);
	end = clock();
	printf(&amp;#34;method 2 runtime : %f\n&amp;#34;, (double)(end - start) / CLOCKS_PER_SEC);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;(출력결과)&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;//길이 100짜리 정렬된 배열을 입력했을 때
found dup : 100
method 1 runtime : 0.000039
found dup : 100
method 2 runtime : 0.000042

//길이 500짜리 정렬된 배열을 입력했을 때
found dup : 500
method 1 runtime : 0.000285
found dup : 500
method 2 runtime : 0.000254

//길이 1000짜리 정렬된 배열을 입력했을 때
found dup : 1000
method 1 runtime : 0.000936
found dup : 1000
method 2 runtime : 0.000386

//길이 100짜리 난수 배열을 입력했을 때
found dup : 6202
method 1 runtime : 0.000038
found dup : 6202
method 2 runtime : 0.000039

//길이 500짜리 난수 배열을 입력했을 때
found dup : 8144
method 1 runtime : 0.000252
found dup : 8144
method 2 runtime : 0.000195

//길이 1000짜리 난수 배열을 입력했을 때
found dup : 8469
method 1 runtime : 0.000941
found dup : 8469
method 2 runtime : 0.000362
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;balance_tree 함수가 실행시간을 많이 잡아먹기 때문에 50번에 한 번씩만 정렬하는 식으로 타협하여 구현하였다.&lt;br&gt;
입력이 정렬된 상태로 들어올 때, 섞여서 들어올 때 모두 방법 1보다 비슷하거나 우월한 결과를 보인다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>유용한 링크 모음</title>
      <link>https://Budnarae.github.io/posts/useful-links/</link>
      <pubDate>Mon, 11 Dec 2023 02:38:58 +0000</pubDate>
      <author>budnarae1001@gmail.com (budnarae)</author>
      <guid>https://Budnarae.github.io/posts/useful-links/</guid>
      <description>&lt;p&gt;본 문서는 지속적으로 갱신됩니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;hugo--블로그&#34;&gt;hugo &amp;amp;&amp;amp; 블로그&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://gohugo.io/installation/&#34;&gt;hugo 설치&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://selfinvestfriends.tistory.com/77&#34;&gt;hugo를 사용한 블로그 구축&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://stackedit.io/&#34;&gt;편리한 마크다운 웹 에디터&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://github.com/michaelneuper/hugo-texify3&#34;&gt;테마 - texify 3&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://github.com/michaelneuper/hugo-texify3/blob/master/exampleSite/hugo.toml&#34;&gt;texify 3 hugo.toml 예시&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://mermaid.live/edit&#34;&gt;mermaid 실시간 시각화 도구&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://www.color-hex.com/&#34;&gt;헥스 코드를 쉽게 확인할 수 있는 곳&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://yenarue.github.io/tip/2020/04/30/Search-SEO/&#34;&gt;구글, 네이버, 다음 검색엔진에 git blog 노출시키기&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://app.diagrams.net/&#34;&gt;자료 구조 및 알고리즘 이미지화에 도움을 주는 사이트&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;리눅스&#34;&gt;리눅스&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://ko.linux-console.net/?p=9839&#34;&gt;리눅스에 brew 설치하기&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;github&#34;&gt;GitHub&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://nayotutorial.tistory.com/132&#34;&gt;불필요한 권한 인증을 피하기 위한 ssh 접속&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
</description>
    </item>
    
  </channel>
</rss>
